const spinButton = document.getElementById('spinButton');
const userBalanceSpan = document.getElementById('userBalance');
const reel1 = document.getElementById('reel1');
const reel2 = document.getElementById('reel2');
const reel3 = document.getElementById('reel3');
const messageDiv = document.getElementById('message');

// –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ Telegram WebApp
// –¶–µ–π ID –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
const userId = Telegram.WebApp.initDataUnsafe.user.id;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
async function updateBalanceDisplay() {
    try {
        const response = await fetch('/api/get_balance', {
            method: 'POST', // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ POST –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è user_id –≤ —Ç—ñ–ª—ñ –∑–∞–ø–∏—Ç—É
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId })
        });
        const data = await response.json();
        if (response.ok) {
            userBalanceSpan.textContent = data.balance;
        } else {
            messageDiv.textContent = `–ü–æ–º–∏–ª–∫–∞: ${data.error}`;
            messageDiv.className = 'message lose-message';
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É:', error);
        messageDiv.textContent = '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É.';
        messageDiv.className = 'message lose-message';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –±–∞—Ä–∞–±–∞–Ω—ñ–≤
function animateReels(reels, finalSymbols) {
    return new Promise(resolve => {
        let completedAnimations = 0;
        reels.forEach((reel, index) => {
            // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
            reel.classList.add('spinning');

            // –°–∏–º—É–ª—é—î–º–æ "–∑—É–ø–∏–Ω–∫—É" –±–∞—Ä–∞–±–∞–Ω–∞ —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
            // –ö–æ–∂–µ–Ω –±–∞—Ä–∞–±–∞–Ω –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ, —Å—Ç–≤–æ—Ä—é—é—á–∏ –µ—Ñ–µ–∫—Ç "—Ä–æ–∑–∫—Ä—É—á—É–≤–∞–Ω–Ω—è"
            setTimeout(() => {
                reel.classList.remove('spinning');
                reel.textContent = finalSymbols[index];
                completedAnimations++;
                if (completedAnimations === reels.length) {
                    resolve(); // –í—Å—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                }
            }, 1000 + index * 200); 
        });
    });
}


// –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç–∏!"
spinButton.addEventListener('click', async () => {
    spinButton.disabled = true; // –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —á–∞—Å —Å–ø—ñ–Ω–∞
    messageDiv.textContent = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    // –ü–æ—á–∏–Ω–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é (–º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ ?)
    reel1.textContent = '?';
    reel2.textContent = '?';
    reel3.textContent = '?';
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
    const reels = [reel1, reel2, reel3];
    reels.forEach(reel => reel.classList.add('spinning'));

    try {
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–ø—ñ–Ω –¥–æ –Ω–∞—à–æ–≥–æ Python-–±–æ—Ç–∞ (–±–µ–∫–µ–Ω–¥—É)
        const response = await fetch('/api/spin', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId }) // –ù–∞–¥—Å–∏–ª–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        });
        const data = await response.json(); // –û—Ç—Ä–∏–º—É—î–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–æ—Ç–∞

        if (response.ok) {
            // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —ñ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await animateReels(reels, data.symbols);

            userBalanceSpan.textContent = data.new_balance; // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            if (data.winnings > 0) {
                messageDiv.textContent = `üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ ${data.winnings} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤! üéâ`;
                messageDiv.className = 'message win-message';
            } else {
                messageDiv.textContent = '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!';
                messageDiv.className = 'message lose-message';
            }
        } else {
            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤)
            messageDiv.textContent = `–ü–æ–º–∏–ª–∫–∞: ${data.error}`;
            messageDiv.className = 'message lose-message';
            reels.forEach(reel => reel.classList.remove('spinning')); // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—ñ–Ω—ñ:', error);
        messageDiv.textContent = '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–ø—ñ–Ω–∞.';
        messageDiv.className = 'message lose-message';
        reels.forEach(reel => reel.classList.remove('spinning')); // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    } finally {
        spinButton.disabled = false; // –í–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    }
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ Web App (–∫–æ–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è)
window.onload = updateBalanceDisplay;