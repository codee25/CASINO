const spinButton = document.getElementById('spinButton');
const userBalanceSpan = document.getElementById('userBalance');
const reel1 = document.getElementById('reel1');
const reel2 = document.getElementById('reel2');
const reel3 = document.getElementById('reel3');
const messageDiv = document.getElementById('message');

// –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ Telegram WebApp
// –¶–µ–π ID –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
// –¶–µ–π —Ä—è–¥–æ–∫ –º–æ–∂–µ –≤–∏–¥–∞–≤–∞—Ç–∏ TypeError, —è–∫—â–æ Web App –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –Ω–µ —á–µ—Ä–µ–∑ Telegram.
// –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ –≤–∏ —Ç–µ—Å—Ç—É—î—Ç–µ –π–æ–≥–æ –Ω–∞–ø—Ä—è–º—É, –∞–ª–µ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω Telegram.
const userId = Telegram.WebApp.initDataUnsafe?.user?.id; // –î–æ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä ?. –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É

// =================================================================
// –ü–û–ß–ê–¢–û–ö: –î–û–î–ê–ù–û –ë–ê–ó–û–í–ò–ô URL –í–ê–®–û–ì–û –ë–û–¢–ê (API –ë–ï–ö–ï–ù–î–£)
// =================================================================
// –í–∞–∂–ª–∏–≤–æ: –∑–∞–º—ñ–Ω—ñ—Ç—å 'https://my-slot-bot.onrender.com' –Ω–∞ –ê–ö–¢–£–ê–õ–¨–ù–ò–ô URL –í–ê–®–û–ì–û –ë–û–¢–ê!
// –¶–µ–π URL - —Ü–µ WEBHOOK_HOST, —è–∫–∏–π –≤–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ Render.com.
const API_BASE_URL = 'https://my-slot-bot.onrender.com';
// =================================================================
// –ö–Ü–ù–ï–¶–¨: –î–û–î–ê–ù–û –ë–ê–ó–û–í–ò–ô URL –í–ê–®–û–ì–û –ë–û–¢–ê
// =================================================================


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
async function updateBalanceDisplay() {
    try {
        const response = await fetch(`${API_BASE_URL}/api/get_balance`, { // –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId })
        });
        const data = await response.json();
        if (response.ok) {
            userBalanceSpan.textContent = data.balance;
        } else {
            messageDiv.textContent = `–ü–æ–º–∏–ª–∫–∞: ${data.error}`;
            messageDiv.className = 'message lose-message';
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É:', error);
        messageDiv.textContent = '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É.';
        messageDiv.className = 'message lose-message';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –±–∞—Ä–∞–±–∞–Ω—ñ–≤
function animateReels(reels, finalSymbols) {
    return new Promise(resolve => {
        let completedAnimations = 0;
        reels.forEach((reel, index) => {
            reel.classList.add('spinning');
            setTimeout(() => {
                reel.classList.remove('spinning');
                reel.textContent = finalSymbols[index];
                completedAnimations++;
                if (completedAnimations === reels.length) {
                    resolve();
                }
            }, 1000 + index * 200); 
        });
    });
}

// –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç–∏!"
spinButton.addEventListener('click', async () => {
    spinButton.disabled = true;
    messageDiv.textContent = '';

    reel1.textContent = '?';
    reel2.textContent = '?';
    reel3.textContent = '?';
    
    const reels = [reel1, reel2, reel3];
    reels.forEach(reel => reel.classList.add('spinning'));

    try {
        const response = await fetch(`${API_BASE_URL}/api/spin`, { // –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId })
        });
        const data = await response.json();

        if (response.ok) {
            await animateReels(reels, data.symbols);

            userBalanceSpan.textContent = data.new_balance;
            if (data.winnings > 0) {
                messageDiv.textContent = `üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ ${data.winnings} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤! üéâ`;
                messageDiv.className = 'message win-message';
            } else {
                messageDiv.textContent = '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!';
                messageDiv.className = 'message lose-message';
            }
        } else {
            messageDiv.textContent = `–ü–æ–º–∏–ª–∫–∞: ${data.error}`;
            messageDiv.className = 'message lose-message';
            reels.forEach(reel => reel.classList.remove('spinning'));
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—ñ–Ω—ñ:', error);
        messageDiv.textContent = '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–ø—ñ–Ω–∞.';
        messageDiv.className = 'message lose-message';
        reels.forEach(reel => reel.classList.remove('spinning'));
    } finally {
        spinButton.disabled = false;
    }
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ Web App (–∫–æ–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è)
window.onload = updateBalanceDisplay;
