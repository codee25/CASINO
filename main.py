import logging
import os
import json
import random
import urllib.parse
from datetime import datetime, timedelta, timezone # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è —á–∞—Å—É

import psycopg2
from psycopg2 import sql

from aiogram import Bot, Dispatcher
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import CommandStart, Command # –î–æ–¥–∞–Ω–æ Command –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

from aiohttp.web import Application, json_response, Request
import aiohttp_cors

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_FRONTEND_URL', 'https://placeholder.com') # URL –≤–∞—à–æ–≥–æ Web App
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST') # URL –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ Render.com

WEBHOOK_PATH = f'/webhook/{API_TOKEN}'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó –∫–æ–º–∞–Ω–¥–∏ /add_balance)
ADMIN_ID_STR = os.getenv('ADMIN_ID')
ADMIN_ID = None
try:
    if ADMIN_ID_STR:
        ADMIN_ID = int(ADMIN_ID_STR)
except ValueError:
    logger.error(f"Invalid ADMIN_ID provided: '{ADMIN_ID_STR}'. It must be an integer.")

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL ---
DATABASE_URL = os.getenv('DATABASE_URL')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≥—Ä–∏ (–∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ JS —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º) ---
SYMBOLS = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', 'üçÄ']
WILD_SYMBOL = '‚≠ê'
SCATTER_SYMBOL = 'üí∞'
ALL_REEL_SYMBOLS = SYMBOLS + [WILD_SYMBOL, SCATTER_SYMBOL] # –í—Å—ñ —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∏–ø–∞—Å—Ç–∏

BET_AMOUNT = 100
FREE_COINS_AMOUNT = 500 # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–Ω—Ç–∏–∫—ñ–≤ –¥–ª—è /get_coins
COOLDOWN_HOURS = 24 # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –≥–æ–¥–∏–Ω–∞—Ö –¥–ª—è /get_coins

DAILY_BONUS_AMOUNT = 300 # –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ Web App
DAILY_BONUS_COOLDOWN_HOURS = 24

# XP —Ç–∞ –†—ñ–≤–Ω—ñ
XP_PER_SPIN = 10
XP_PER_WIN_MULTIPLIER = 2 
LEVEL_THRESHOLDS = [
    0,    # Level 1
    100,  # Level 2
    300,  # Level 3
    600,  # Level 4
    1000, # Level 5
    1500, # Level 6
    2200, # Level 7
    3000, # Level 8
    4000, # Level 9
    5500, # Level 10
    7500, # Level 11
    10000 # Level 12 (and beyond)
]

def get_level_from_xp(xp):
    """–í–∏–∑–Ω–∞—á–∞—î —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å–≤—ñ–¥—É."""
    for i, threshold in enumerate(LEVEL_THRESHOLDS):
        if xp < threshold:
            return i # –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å (—ñ–Ω–¥–µ–∫—Å + 1)
    return len(LEVEL_THRESHOLDS) # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å, —è–∫—â–æ XP –ø–µ—Ä–µ–≤–∏—â—É—î –≤—Å—ñ –ø–æ—Ä–æ–≥–∏

def get_xp_for_next_level(level):
    """–ü–æ–≤–µ—Ä—Ç–∞—î XP, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è."""
    if level < len(LEVEL_THRESHOLDS):
        return LEVEL_THRESHOLDS[level] # –ü–æ—Ä–æ–≥ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    return LEVEL_THRESHOLDS[-1] # –Ø–∫—â–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å, –ø–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Ä—ñ–≥

PAYOUTS = {
    # –¢—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ (–≤–∫–ª—é—á–∞—é—á–∏ Wild, —â–æ –¥—ñ—î —è–∫ –∑–∞–º—ñ–Ω–Ω–∏–∫)
    ('üçí', 'üçí', 'üçí'): 1000,
    ('üçã', 'üçã', 'üçã'): 800,
    ('üçä', 'üçä', 'üçä'): 600,
    ('üçá', 'üçá', 'üçá'): 400,
    ('üîî', 'üîî', 'üîî'): 300,
    ('üíé', 'ÔøΩ', 'üíé'): 200,
    ('üçÄ', 'üçÄ', 'üçÄ'): 150,
    ('‚≠ê', '‚≠ê', '‚≠ê'): 2000, # –í–∏—Å–æ–∫–∏–π –≤–∏–≥—Ä–∞—à –∑–∞ —Ç—Ä–∏ Wild
    
    # –î–≤—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ (–≤–∫–ª—é—á–∞—é—á–∏ Wild) - WILD –º–æ–∂–µ –±—É—Ç–∏ –¥—Ä—É–≥–∏–º –∞–±–æ —Ç—Ä–µ—Ç—ñ–º
    ('üçí', 'üçí'): 100,
    ('üçã', 'üçã'): 80,

    # Scatter –≤–∏–≥—Ä–∞—à—ñ (–Ω–µ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ –ø–æ–∑–∏—Ü—ñ—ó, –∞–ª–µ –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ó—Ö —É spin_slot)
    ('üí∞', 'üí∞'): 200, # –ó–∞ 2 Scatter
    ('üí∞', 'üí∞', 'üí∞'): 500, # –ó–∞ 3 Scatter
}

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö ---

def get_db_connection():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL –∑–∞ URL."""
    conn = None
    try:
        url = urllib.parse.urlparse(DATABASE_URL)
        conn = psycopg2.connect(
            database=url.path[1:],
            user=url.username,
            password=url.password,
            host=url.hostname,
            port=url.port,
            sslmode='require'
        )
        return conn
    except psycopg2.Error as err:
        logger.error(f"DB connection error: {err}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error during DB connection: {e}")
        raise

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –≤–∏–∫–æ–Ω—É—î –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î (–∑ –±–∞–∑–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                balance INTEGER DEFAULT 1000,
                xp INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1
            )
        ''')
        conn.commit()
        logger.info("Table 'users' initialized or already exists.")

        # 2. –ú—ñ–≥—Ä–∞—Ü—ñ—è: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—è last_free_coins_claim, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è /get_coins)
        try:
            cursor.execute('''
                ALTER TABLE users ADD COLUMN IF NOT EXISTS last_free_coins_claim TIMESTAMP WITH TIME ZONE DEFAULT NULL;
            ''')
            conn.commit()
            logger.info("Column 'last_free_coins_claim' added or already exists.")
        except psycopg2.ProgrammingError as e:
            # –¶–µ –º–æ–∂–µ —Å—Ç–∞—Ç–∏—Å—è, —è–∫—â–æ IF NOT EXISTS –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ —á–µ—Ä–µ–∑ –≤–µ—Ä—Å—ñ—é PostgreSQL
            logger.warning(f"Failed to add column 'last_free_coins_claim' (might already exist or specific DB error): {e}")
            conn.rollback() # –í—ñ–¥–∫–æ—á—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–º–∏–ª–∫–∏

        # 3. –ú—ñ–≥—Ä–∞—Ü—ñ—è: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—è last_daily_bonus_claim, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É)
        try:
            cursor.execute('''
                ALTER TABLE users ADD COLUMN IF NOT EXISTS last_daily_bonus_claim TIMESTAMP WITH TIME ZONE DEFAULT NULL;
            ''')
            conn.commit()
            logger.info("Column 'last_daily_bonus_claim' added or already exists.")
        except psycopg2.ProgrammingError as e:
            logger.warning(f"Failed to add column 'last_daily_bonus_claim' (might already exist or specific DB error): {e}")
            conn.rollback()

        logger.info("DB schema migration checked.")

    except Exception as e:
        logger.error(f"DB init/migration error: {e}")
    finally:
        if conn:
            conn.close()

def get_user_data(user_id):
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–∞–ª–∞–Ω—Å, XP, —Ä—ñ–≤–µ–Ω—å, —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –±–æ–Ω—É—Å—ñ–≤) –∑ –ë–î."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            'SELECT balance, xp, level, last_free_coins_claim, last_daily_bonus_claim FROM users WHERE user_id = %s', 
            (user_id,)
        )
        result = cursor.fetchone()
        if result:
            return {
                'balance': result[0],
                'xp': result[1],
                'level': result[2],
                'last_free_coins_claim': result[3],
                'last_daily_bonus_claim': result[4]
            }
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –π–æ–≥–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
            cursor.execute(
                'INSERT INTO users (user_id, balance, xp, level) VALUES (%s, %s, %s, %s)', 
                (user_id, 1000, 0, 1)
            )
            conn.commit()
            return {
                'balance': 1000,
                'xp': 0,
                'level': 1,
                'last_free_coins_claim': None,
                'last_daily_bonus_claim': None
            }
    except Exception as e:
        logger.error(f"Error getting user data from PostgreSQL for {user_id}: {e}")
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        return {'balance': 0, 'xp': 0, 'level': 1, 'last_free_coins_claim': None, 'last_daily_bonus_claim': None}
    finally:
        if conn:
            conn.close()

def update_user_data(user_id, balance_change=0, xp_change=0, last_free_coins_claim=None, last_daily_bonus_claim=None):
    """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è
        current_data = get_user_data(user_id)
        current_xp = current_data['xp'] + xp_change
        current_balance = current_data['balance'] + balance_change
        current_level = get_level_from_xp(current_xp)

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        update_query = sql.SQL('''
            INSERT INTO users (user_id, balance, xp, level, last_free_coins_claim, last_daily_bonus_claim) 
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (user_id) DO UPDATE SET 
                balance = EXCLUDED.balance + %s, 
                xp = EXCLUDED.xp + %s, 
                level = %s,
                last_free_coins_claim = COALESCE(EXCLUDED.last_free_coins_claim, users.last_free_coins_claim),
                last_daily_bonus_claim = COALESCE(EXCLUDED.last_daily_bonus_claim, users.last_daily_bonus_claim)
        ''')
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è last_free_coins_claim —Ç–∞ last_daily_bonus_claim –ª–∏—à–µ —è–∫—â–æ –≤–æ–Ω–∏ –Ω–∞–¥–∞–Ω—ñ
        params = [user_id, current_balance, current_xp, current_level]
        
        # –û–±—Ä–æ–±–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –±–æ–Ω—É—Å—ñ–≤
        final_last_free_coins_claim = last_free_coins_claim if last_free_coins_claim is not None else current_data['last_free_coins_claim']
        final_last_daily_bonus_claim = last_daily_bonus_claim if last_daily_bonus_claim is not None else current_data['last_daily_bonus_claim']
        
        params.extend([final_last_free_coins_claim, final_last_daily_bonus_claim])
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è ON CONFLICT DO UPDATE
        params.extend([balance_change, xp_change, current_level])


        cursor.execute(update_query, params)
        conn.commit()
        logger.info(f"User {user_id} data updated. Balance change: {balance_change}, XP change: {xp_change}.")
    except Exception as e:
        logger.error(f"Error updating user data in PostgreSQL for {user_id}: {e}")
    finally:
        if conn:
            conn.close()


def check_win_conditions(symbols):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏–≥—Ä–∞—à–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ Wild."""
    winnings = 0
    # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ —Å–∏–º–≤–æ–ª–∏
    s1, s2, s3 = symbols

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Scatter –≤–∏–≥—Ä–∞—à—ñ–≤ ---
    scatter_count = symbols.count(SCATTER_SYMBOL)
    if scatter_count >= 2:
        winnings += PAYOUTS.get(('üí∞', 'üí∞', 'üí∞') if scatter_count == 3 else ('üí∞', 'üí∞'), 0)
        logger.info(f"Scatter win detected: {scatter_count} scatters, winnings: {winnings}")
        return winnings # Scatter –≤–∏–≥—Ä–∞—à—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–∏–º–∏

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–≥—Ä–∞—à—ñ–≤ –¥–ª—è 3 –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ ---
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –º–æ–∂–ª–∏–≤—É "–æ—Å–Ω–æ–≤–Ω—É" –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é (–±–µ–∑ Wild)
    for main_symbol in SYMBOLS:
        # –Ø–∫—â–æ –≤—Å—ñ 3 —Å–∏–º–≤–æ–ª–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –∞–±–æ Wild
        if ((s1 == main_symbol or s1 == WILD_SYMBOL) and
            (s2 == main_symbol or s2 == WILD_SYMBOL) and
            (s3 == main_symbol or s3 == WILD_SYMBOL)):
            winnings = PAYOUTS.get((main_symbol, main_symbol, main_symbol), 0)
            logger.info(f"3-of-a-kind win for {main_symbol} (with Wilds): {winnings}")
            return winnings # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–≥—Ä–∞—à—ñ–≤ –¥–ª—è 2 –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ (–ª–∏—à–µ –ø–µ—Ä—à—ñ –¥–≤–∞) ---
    for main_symbol in SYMBOLS:
        if ((s1 == main_symbol or s1 == WILD_SYMBOL) and 
            (s2 == main_symbol or s2 == WILD_SYMBOL) and
            s3 != main_symbol and s3 != WILD_SYMBOL): # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç—Ä–µ—Ç—ñ–π –Ω–µ —Ç–∞–∫–∏–π —Å–∞–º–∏–π
            winnings = PAYOUTS.get((main_symbol, main_symbol), 0)
            logger.info(f"2-of-a-kind win for {main_symbol} (with Wilds): {winnings}")
            return winnings

    return winnings


def spin_slot(user_id):
    user_data = get_user_data(user_id)
    current_balance = user_data['balance']
    current_xp = user_data['xp']
    current_level = user_data['level']

    if current_balance < BET_AMOUNT:
        return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å–ø—ñ–Ω–∞!'}, current_balance

    # –ó–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞–≤–∫—É
    update_user_data(user_id, balance_change=-BET_AMOUNT)

    result_symbols = [random.choice(ALL_REEL_SYMBOLS) for _ in range(3)]
    winnings = check_win_conditions(result_symbols) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    xp_gained = XP_PER_SPIN
    if winnings > 0:
        update_user_data(user_id, balance_change=winnings)
        xp_gained += (XP_PER_SPIN * XP_PER_WIN_MULTIPLIER)
        logger.info(f"User {user_id} won {winnings}. Symbols: {result_symbols}")
    else:
        logger.info(f"User {user_id} lost on spin. Symbols: {result_symbols}")

    # –û–Ω–æ–≤–ª—é—î–º–æ XP —Ç–∞ —Ä—ñ–≤–µ–Ω—å
    update_user_data(user_id, xp_change=xp_gained)

    final_user_data = get_user_data(user_id) # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —Å–ø—ñ–Ω–∞
    
    return {
        'symbols': result_symbols,
        'winnings': winnings,
        'new_balance': final_user_data['balance'],
        'new_xp': final_user_data['xp'],
        'new_level': final_user_data['level'],
        'next_level_xp': get_xp_for_next_level(final_user_data['level']) # –î–æ–¥–∞—î–º–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    }, final_user_data['balance']


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram-–±–æ—Ç–∞ (aiogram v3 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å) ---

@dp.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    init_db() # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Å—Ç–∞—Ä—Ç—ñ (–±–µ–∑–ø–µ—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤)
    user_data = get_user_data(user_id) # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –í—ñ–¥–∫—Ä–∏—Ç–∏ –°–ª–æ—Ç-–ö–∞–∑–∏–Ω–æ üé∞", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])

    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –°–ª–æ—Ç-–ö–∞–∑–∏–Ω–æ!\n"
        f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤.\n"
        f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä–∞—Ç–∏!",
        reply_markup=keyboard
    )

@dp.message(Command("add_balance"))
async def add_balance_command(message: Message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if ADMIN_ID is None or user_id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"User {user_id} tried to use /add_balance without admin privileges.")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
    args = message.text.split()
    if len(args) != 2:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/add_balance <—Å—É–º–∞>`")
        return

    try:
        amount = int(args[1])
        if amount <= 0:
            await message.reply("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–Ω—Ç–∏–∫—ñ–≤
    update_user_data(user_id, balance_change=amount)
    updated_user_data = get_user_data(user_id)

    await message.reply(f"üéâ {amount} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {updated_user_data['balance']} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤. üéâ")
    logger.info(f"Admin {user_id} added {amount} to their balance. New balance: {updated_user_data['balance']}.")


@dp.message(Command("get_coins"))
async def get_free_coins_command(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id) # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    last_claim_time = user_data['last_free_coins_claim']

    current_time = datetime.now(timezone.utc)
    cooldown_duration = timedelta(hours=COOLDOWN_HOURS)

    if last_claim_time and (current_time - last_claim_time) < cooldown_duration:
        time_left = cooldown_duration - (current_time - last_claim_time)
        hours = int(time_left.total_seconds() // 3600)
        minutes = int((time_left.total_seconds() % 3600) // 60)
        await message.reply(
            f"üí∞ –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏ —Ñ–∞–Ω—Ç–∏–∫–∏ –Ω–µ—â–æ–¥–∞–≤–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {hours} –≥–æ–¥ {minutes} —Ö–≤."
        )
        logger.info(f"User {user_id} tried to claim free coins but is on cooldown.")
    else:
        update_user_data(user_id, balance_change=FREE_COINS_AMOUNT, last_free_coins_claim=current_time)
        updated_user_data = get_user_data(user_id)
        await message.reply(
            f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {FREE_COINS_AMOUNT} –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Ñ–∞–Ω—Ç–∏–∫—ñ–≤!\n"
            f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {updated_user_data['balance']} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤. üéâ"
        )
        logger.info(f"User {user_id} claimed {FREE_COINS_AMOUNT} free coins. New balance: {updated_user_data['balance']}.")


# --- –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Web App (—á–µ—Ä–µ–∑ aiohttp.web) ---

async def api_get_balance(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    if not user_id:
        logger.warning("api_get_balance: User ID is missing in request.")
        return json_response({'error': 'User ID is required'}, status=400)
    
    user_data = get_user_data(user_id) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    return json_response({
        'balance': user_data['balance'],
        'xp': user_data['xp'],
        'level': user_data['level'],
        'next_level_xp': get_xp_for_next_level(user_data['level']),
        'last_daily_bonus_claim': user_data['last_daily_bonus_claim'].isoformat() if user_data['last_daily_bonus_claim'] else None
    })

async def api_spin(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    if not user_id:
        logger.warning("api_spin: User ID is missing in request.")
        return json_response({'error': 'User ID is required'}, status=400)
    
    result, final_balance = spin_slot(user_id)
    if 'error' in result:
        return json_response(result, status=400)
    
    return json_response(result)


async def api_claim_daily_bonus(request: Request):
    """API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É —á–µ—Ä–µ–∑ Web App."""
    data = await request.json()
    user_id = data.get('user_id')
    if not user_id:
        logger.warning("api_claim_daily_bonus: User ID is missing in request.")
        return json_response({'error': 'User ID is required'}, status=400)
    
    user_data = get_user_data(user_id)
    last_claim_time = user_data['last_daily_bonus_claim']

    current_time = datetime.now(timezone.utc)
    cooldown_duration = timedelta(hours=DAILY_BONUS_COOLDOWN_HOURS)

    if last_claim_time and (current_time - last_claim_time) < cooldown_duration:
        time_left = cooldown_duration - (current_time - last_claim_time)
        hours = int(time_left.total_seconds() // 3600)
        minutes = int((time_left.total_seconds() % 3600) // 60)
        return json_response(
            {'error': f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ {hours} –≥–æ–¥ {minutes} —Ö–≤ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å—É."}, 
            status=403 # Forbidden
        )
    else:
        update_user_data(user_id, balance_change=DAILY_BONUS_AMOUNT, last_daily_bonus_claim=current_time)
        return json_response({'message': '–ë–æ–Ω—É—Å —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!', 'amount': DAILY_BONUS_AMOUNT})


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---

async def on_startup_webhook(web_app: Application):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    logger.warning('Starting bot and webhook...')
    init_db() # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ö–µ–º–∏
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to: {WEBHOOK_URL}")

async def on_shutdown_webhook(web_app: Application):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ Aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    logger.warning('Shutting down bot and webhook...')
    await bot.delete_webhook()

# –ì–æ–ª–æ–≤–Ω–∏–π Aiohttp –¥–æ–¥–∞—Ç–æ–∫, —è–∫–∏–π Gunicorn –±—É–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏
app_aiohttp = Application()

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ –¥–ª—è Web App (–ü–ï–†–ï–î CORS)
app_aiohttp.router.add_post('/api/get_balance', api_get_balance, name='api_get_balance')
app_aiohttp.router.add_post('/api/spin', api_spin, name='api_spin')
app_aiohttp.router.add_post('/api/claim_daily_bonus', api_claim_daily_bonus, name='api_claim_daily_bonus') # –ù–û–í–ò–ô API –ï–ù–î–ü–û–Ü–ù–¢

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ CORS –¥–ª—è –¥–æ–∑–≤–æ–ª—É –∑–∞–ø–∏—Ç—ñ–≤ –∑ Web App URL
cors = aiohttp_cors.setup(app_aiohttp, defaults={
    WEB_APP_URL: aiohttp_cors.ResourceOptions(
        allow_credentials=True,
        expose_headers="*",
        allow_headers="*",
        allow_methods="*",
    )
})

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ CORS –¥–æ –≤–∞—à–∏—Ö API-–º–∞—Ä—à—Ä—É—Ç—ñ–≤
for route in list(app_aiohttp.router.routes()):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–∞—à—ñ API –º–∞—Ä—à—Ä—É—Ç–∏, –≤–∫–ª—é—á–∞—é—á–∏ –Ω–æ–≤–∏–π
    if route.resource and route.resource.name in ['api_get_balance', 'api_spin', 'api_claim_daily_bonus']:
        cors.add(route)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è Telegram webhook
SimpleRequestHandler(
    dispatcher=dp,
    bot=bot,
).register(app_aiohttp, WEBHOOK_PATH)

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É/–∑—É–ø–∏–Ω–∫–∏ –¥–æ Aiohttp –¥–æ–¥–∞—Ç–∫–∞
app_aiohttp.on_startup.append(on_startup_webhook)
app_aiohttp.on_shutdown.append(on_shutdown_webhook)

if __name__ == '__main__':
    pass