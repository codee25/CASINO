import logging
import os
import json
import random

import psycopg2
from psycopg2 import sql

from aiogram import Bot, Dispatcher
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import CommandStart # –î–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥
from aiogram.webhook.aiohttp_server import SimpleRequestHandler # –î–ª—è webhook
from aiohttp.web import Application, json_response, Request # –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ API
from aiohttp.web_runner import AppRunner, TCPSite # –î–ª—è –∑–∞–ø—É—Å–∫—É Aiohttp —Å–µ—Ä–≤–µ—Ä–∞

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–±—É–¥—É—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –Ω–∞ Render.com) ---
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_FRONTEND_URL', 'https://placeholder.com') # URL –≤–∞—à–æ–≥–æ Web App
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST') # URL –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ Render.com
WEBHOOK_PATH = f'/webhook/{API_TOKEN}'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher() # –î–∏—Å–ø–µ—Ç—á–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–µ–∑ –±–æ—Ç–∞ —É v3

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL ---
PG_HOST = os.getenv('PG_HOST')
PG_USER = os.getenv('PG_USER')
PG_PASSWORD = os.getenv('PG_PASSWORD')
PG_DATABASE = os.getenv('PG_DATABASE')
PG_PORT = os.getenv('PG_PORT', 5432)

def get_db_connection():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(
            host=PG_HOST,
            user=PG_USER,
            password=PG_PASSWORD,
            dbname=PG_DATABASE,
            port=PG_PORT,
            sslmode='require' # –í–∞–∂–ª–∏–≤–æ –¥–ª—è Render.com, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ SSL
        )
        return conn
    except psycopg2.Error as err:
        logger.error(f"Error connecting to PostgreSQL: {err}")
        raise

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                balance INTEGER DEFAULT 1000
            )
        ''')
        conn.commit()
        logger.info("PostgreSQL database initialized or already exists.")
    except Exception as e:
        logger.error(f"Failed to initialize PostgreSQL database: {e}")
    finally:
        if conn:
            conn.close()

def get_user_balance(user_id):
    """–û—Ç—Ä–∏–º—É—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT balance FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        if result:
            return result[0]
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –π–æ–≥–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º
            update_user_balance(user_id, 1000)
            return 1000
    except Exception as e:
        logger.error(f"Error getting user balance from PostgreSQL for {user_id}: {e}")
        return 0
    finally:
        if conn:
            conn.close()

def update_user_balance(user_id, amount):
    """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(sql.SQL('''
            INSERT INTO users (user_id, balance) VALUES (%s, %s)
            ON CONFLICT (user_id) DO UPDATE SET balance = users.balance + %s
        '''), (user_id, amount, amount))
        conn.commit()
        logger.info(f"User {user_id} balance updated by {amount} in PostgreSQL.")
    except Exception as e:
        logger.error(f"Error updating user balance in PostgreSQL for {user_id} by {amount}: {e}")
    finally:
        if conn:
            conn.close()

# --- –õ–æ–≥—ñ–∫–∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∏ ---
SYMBOLS = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', 'üçÄ']
BET_AMOUNT = 100

PAYOUTS = {
    ('üçí', 'üçí', 'üçí'): 1000,
    ('üçã', 'üçã', 'üçã'): 800,
    ('üçä', 'üçä', 'üçä'): 600,
    ('üçá', 'üçá', 'üçá'): 400,
    ('üîî', 'üîî', 'üîî'): 300,
    ('üíé', 'üíé', 'üíé'): 200,
    ('üçÄ', 'üçÄ', 'üçÄ'): 150,
    ('üçí', 'üçí'): 100, # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –¥–≤–æ—Ö –≤–∏—à–Ω—ñ
    ('üçã', 'üçã'): 80,  # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –¥–≤–æ—Ö –ª–∏–º–æ–Ω—ñ–≤
}

def spin_slot(user_id):
    current_balance = get_user_balance(user_id)
    if current_balance < BET_AMOUNT:
        return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å–ø—ñ–Ω–∞!'}, current_balance

    update_user_balance(user_id, -BET_AMOUNT) # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞–≤–∫—É
    # new_balance_after_bet = get_user_balance(user_id) # –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—É—Ç, –æ—Ç—Ä–∏–º–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å

    result_symbols = [random.choice(SYMBOLS) for _ in range(3)]
    winnings = 0

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–≥—Ä–∞—à—ñ
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ 3 –æ–¥–Ω–∞–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
    if result_symbols[0] == result_symbols[1] == result_symbols[2]:
        winnings = PAYOUTS.get(tuple(result_symbols), 0)
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ 2 –æ–¥–Ω–∞–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏, —è–∫—â–æ –Ω–µ –±—É–ª–æ 3 –æ–¥–Ω–∞–∫–æ–≤–∏—Ö
    elif result_symbols[0] == result_symbols[1]:
        winnings = PAYOUTS.get((result_symbols[0], result_symbols[1]), 0)
    elif result_symbols[1] == result_symbols[2]:
        winnings = PAYOUTS.get((result_symbols[1], result_symbols[2]), 0)

    if winnings > 0:
        update_user_balance(user_id, winnings)
        logger.info(f"User {user_id} won {winnings}.")
    else:
        logger.info(f"User {user_id} lost on spin.")

    final_balance = get_user_balance(user_id)

    return {
        'symbols': result_symbols,
        'winnings': winnings,
        'new_balance': final_balance
    }, final_balance

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram-–±–æ—Ç–∞ (aiogram v3 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å) ---

@dp.message(CommandStart())
async def send_welcome(message: Message): # message: Message - —Ç–∏–ø –¥–ª—è aiogram v3
    user_id = message.from_user.id
    init_db() # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Å—Ç–∞—Ä—Ç—ñ (–±–µ–∑–ø–µ—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤)
    current_balance = get_user_balance(user_id) # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –í—ñ–¥–∫—Ä–∏—Ç–∏ –°–ª–æ—Ç-–ö–∞–∑–∏–Ω–æ üé∞", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])

    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –°–ª–æ—Ç-–ö–∞–∑–∏–Ω–æ!\n"
        f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤.\n"
        f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä–∞—Ç–∏!",
        reply_markup=keyboard
    )

# --- –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Web App (—á–µ—Ä–µ–∑ aiohttp.web) ---
# –¶—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –±—É–¥—É—Ç—å —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ –≤ —Ç–æ–π –∂–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —â–æ –π Telegram webhook

async def api_get_balance(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    if not user_id:
        return json_response({'error': 'User ID is required'}, status=400)
    
    balance = get_user_balance(user_id)
    return json_response({'balance': balance})

async def api_spin(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    if not user_id:
        return json_response({'error': 'User ID is required'}, status=400)
    
    result, new_balance = spin_slot(user_id)
    if 'error' in result:
        return json_response(result, status=400)
    
    return json_response(result)

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---

async def on_startup_webhook(web_app: Application):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    logger.warning('Starting bot and webhook...')
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫—É
    init_db()
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –¥–ª—è Telegram
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to: {WEBHOOK_URL}")

async def on_shutdown_webhook(web_app: Application):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ Aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    logger.warning('Shutting down bot and webhook...')
    await bot.delete_webhook()
    logger.warning('Webhook deleted.')

# –ì–æ–ª–æ–≤–Ω–∏–π Aiohttp –¥–æ–¥–∞—Ç–æ–∫, —è–∫–∏–π Gunicorn –±—É–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏
app_aiohttp = Application()

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è Telegram webhook
SimpleRequestHandler(
    dispatcher=dp,
    bot=bot,
).register(app_aiohttp, WEBHOOK_PATH)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ –¥–ª—è Web App
app_aiohttp.router.add_post('/api/get_balance', api_get_balance)
app_aiohttp.router.add_post('/api/spin', api_spin)

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É/–∑—É–ø–∏–Ω–∫–∏ –¥–æ Aiohttp –¥–æ–¥–∞—Ç–∫–∞
app_aiohttp.on_startup.append(on_startup_webhook)
app_aiohttp.on_shutdown.append(on_shutdown_webhook)


# –¶–µ–π –±–ª–æ–∫ `if __name__ == '__main__':` –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É
# –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏–º–µ Gunicorn.
# –í—ñ–Ω –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Gunicorn –ª–æ–∫–∞–ª—å–Ω–æ).
if __name__ == '__main__':
    # –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ Gunicorn) –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    # –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: WEBHOOK_HOST —Ç–∞ WEB_APP_URL –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ
    logger.info("Running locally via aiohttp.web")
    init_db() # –õ–æ–∫–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
    # –©–æ–± –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∑ –≤–µ–±—Ö—É–∫–∞–º–∏, –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è ngrok –∞–±–æ –ø–æ–¥—ñ–±–Ω–∏–π —Ç—É–Ω–µ–ª—å
    # —ñ –≤—Ä—É—á–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook –Ω–∞ ngrok URL.
    # –î–ª—è API Web App, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ index.html –≤ –±—Ä–∞—É–∑–µ—Ä—ñ —ñ –≤–∫–∞–∂—ñ—Ç—å /api/ –Ω–∞ localhost.
    
    # –¶–µ–π –±–ª–æ–∫ –ù–ï –±—É–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –Ω–∞ Render.com
    # –ù–∞ Render.com Gunicorn –±—É–¥–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ 'app_aiohttp' —Ç–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —ó—ó.

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–ø—Ä–∏–∫–ª–∞–¥):
    # from aiohttp.web import run_app
    # run_app(app_aiohttp, host="0.0.0.0", port=8080)
    pass
