import logging
import os
import json
import random
import urllib.parse

import psycopg2
from psycopg2 import sql

from aiogram import Bot, Dispatcher
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import CommandStart
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

from aiohttp.web import Application, json_response, Request
# –î–û–î–ê–Ñ–ú–û: aiohttp_cors –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS
import aiohttp_cors # <--- –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_FRONTEND_URL', 'https://placeholder.com')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
WEBHOOK_PATH = f'/webhook/{API_TOKEN}'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL ---
DATABASE_URL = os.getenv('DATABASE_URL')

# ==========================================================
# –ü–û–ß–ê–¢–û–ö: –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø BOT –¢–ê DISPATCHER
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
# –ö–Ü–ù–ï–¶–¨: –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø BOT –¢–ê DISPATCHER
# ==========================================================

# ... (get_db_connection, init_db, get_user_balance, update_user_balance, SYMBOLS, BET_AMOUNT, PAYOUTS, spin_slot - –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...

def get_db_connection():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL –∑–∞ URL."""
    conn = None
    try:
        url = urllib.parse.urlparse(DATABASE_URL)
        conn = psycopg2.connect(
            database=url.path[1:],
            user=url.username,
            password=url.password,
            host=url.hostname,
            port=url.port,
            sslmode='require'
        )
        return conn
    except psycopg2.Error as err:
        logger.error(f"Error connecting to PostgreSQL: {err}")
        raise
    except Exception as e:
        logger.error(f"Failed to parse DATABASE_URL or establish connection: {e}")
        raise

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                balance INTEGER DEFAULT 1000
            )
        ''')
        conn.commit()
        logger.info("PostgreSQL database initialized or already exists.")
    except Exception as e:
        logger.error(f"Failed to initialize PostgreSQL database: {e}")
    finally:
        if conn:
            conn.close()

def get_user_balance(user_id):
    """–û—Ç—Ä–∏–º—É—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT balance FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        if result:
            return result[0]
        else:
            update_user_balance(user_id, 1000)
            return 1000
    except Exception as e:
        logger.error(f"Error getting user balance from PostgreSQL for {user_id}: {e}")
        return 0
    finally:
        if conn:
            conn.close()

def update_user_balance(user_id, amount):
    """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö PostgreSQL."""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(sql.SQL('''
            INSERT INTO users (user_id, balance) VALUES (%s, %s)
            ON CONFLICT (user_id) DO UPDATE SET balance = users.balance + %s
        '''), (user_id, amount, amount))
        conn.commit()
        logger.info(f"User {user_id} balance updated by {amount} in PostgreSQL.")
    except Exception as e:
        logger.error(f"Error updating user balance in PostgreSQL for {user_id} by {amount}: {e}")
    finally:
        if conn:
            conn.close()

SYMBOLS = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', 'üçÄ']
BET_AMOUNT = 100

PAYOUTS = {
    ('üçí', 'üçí', 'üçí'): 1000,
    ('üçã', 'üçã', 'üçã'): 800,
    ('üçä', 'üçä', 'üçä'): 600,
    ('üçá', 'üçá', 'üçá'): 400,
    ('üîî', 'üîî', 'üîî'): 300,
    ('üíé', 'üíé', 'üíé'): 200,
    ('üçÄ', 'üçÄ', 'üçÄ'): 150,
    ('ÔøΩ', 'üçí'): 100,
    ('üçã', 'üçã'): 80,
}

def spin_slot(user_id):
    current_balance = get_user_balance(user_id)
    if current_balance < BET_AMOUNT:
        return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å–ø—ñ–Ω–∞!'}, current_balance

    update_user_balance(user_id, -BET_AMOUNT)

    result_symbols = [random.choice(SYMBOLS) for _ in range(3)]
    winnings = 0

    if result_symbols[0] == result_symbols[1] == result_symbols[2]:
        winnings = PAYOUTS.get(tuple(result_symbols), 0)
    elif result_symbols[0] == result_symbols[1]:
        winnings = PAYOUTS.get((result_symbols[0], result_symbols[1]), 0)
    elif result_symbols[1] == result_symbols[2]:
        winnings = PAYOUTS.get((result_symbols[1], result_symbols[2]), 0)

    if winnings > 0:
        update_user_balance(user_id, winnings)
        logger.info(f"User {user_id} won {winnings}.")
    else:
        logger.info(f"User {user_id} lost on spin.")

    final_balance = get_user_balance(user_id)

    return {
        'symbols': result_symbols,
        'winnings': winnings,
        'new_balance': final_balance
    }, final_balance

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram-–±–æ—Ç–∞ ---

@dp.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    init_db()
    current_balance = get_user_balance(user_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –í—ñ–¥–∫—Ä–∏—Ç–∏ –°–ª–æ—Ç-–ö–∞–∑–∏–Ω–æ üé∞", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])

    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –°–ª–æ—Ç-–ö–∞–∑–∏–Ω–æ!\n"
        f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} —Ñ–∞–Ω—Ç–∏–∫—ñ–≤.\n"
        f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä–∞—Ç–∏!",
        reply_markup=keyboard
    )

# --- –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Web App ---

async def api_get_balance(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    if not user_id:
        return json_response({'error': 'User ID is required'}, status=400)
    
    balance = get_user_balance(user_id)
    return json_response({'balance': balance})

async def api_spin(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    if not user_id:
        return json_response({'error': 'User ID is required'}, status=400)
    
    result, new_balance = spin_slot(user_id)
    if 'error' in result:
        return json_response(result, status=400)
    
    return json_response(result)

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---

async def on_startup_webhook(web_app: Application):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    logger.warning('Starting bot and webhook...')
    init_db()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to: {WEBHOOK_URL}")

async def on_shutdown_webhook(web_app: Application):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ Aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    logger.warning('Shutting down bot and webhook...')
    await bot.delete_webhook()
    logger.warning('Webhook deleted.')

# –ì–æ–ª–æ–≤–Ω–∏–π Aiohttp –¥–æ–¥–∞—Ç–æ–∫, —è–∫–∏–π Gunicorn –±—É–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏
app_aiohttp = Application()

# =================================================================
# –ü–û–ß–ê–¢–û–ö: –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø CORS
# –í–∞–∂–ª–∏–≤–æ: WEB_APP_URL –º–∞—î –±—É—Ç–∏ –ê–ö–¢–£–ê–õ–¨–ù–ò–ú URL –≤–∞—à–æ–≥–æ Static Site
# (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://my-slot-webapp.onrender.com)
# =================================================================
# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ CORS –¥–ª—è –¥–æ–∑–≤–æ–ª—É –∑–∞–ø–∏—Ç—ñ–≤ –∑ Web App URL
cors = aiohttp_cors.setup(app_aiohttp, defaults={
    WEB_APP_URL: aiohttp_cors.ResourceOptions(
        allow_credentials=True,
        expose_headers="*",
        allow_headers="*",
        allow_methods="*",
    )
})

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ CORS –¥–æ –≤–∞—à–∏—Ö API-–º–∞—Ä—à—Ä—É—Ç—ñ–≤
# –û–≥–æ—Ä—Ç–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é cors.add(route)
for route in list(app_aiohttp.router.routes()): # –†–æ–±–∏–º–æ –∫–æ–ø—ñ—é, –±–æ –º–∞—Ä—à—Ä—É—Ç–∏ –∑–º—ñ–Ω—é—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
    if route.resource.name in ['api_get_balance', 'api_spin']: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤–∞—à—ñ API –º–∞—Ä—à—Ä—É—Ç–∏
        cors.add(route)
# =================================================================
# –ö–Ü–ù–ï–¶–¨: –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø CORS
# =================================================================

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è Telegram webhook
SimpleRequestHandler(
    dispatcher=dp,
    bot=bot,
).register(app_aiohttp, WEBHOOK_PATH)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ –¥–ª—è Web App
# –¶–Ü –ú–ê–†–®–†–£–¢–ò –¢–ï–ü–ï–† –û–ë–†–û–ë–õ–Ø–Æ–¢–¨–°–Ø –ß–ï–†–ï–ó CORS
app_aiohttp.router.add_post('/api/get_balance', api_get_balance, name='api_get_balance') # –î–æ–¥–∞—î–º–æ name
app_aiohttp.router.add_post('/api/spin', api_spin, name='api_spin') # –î–æ–¥–∞—î–º–æ name

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É/–∑—É–ø–∏–Ω–∫–∏ –¥–æ Aiohttp –¥–æ–¥–∞—Ç–∫–∞
app_aiohttp.on_startup.append(on_startup_webhook)
app_aiohttp.on_shutdown.append(on_shutdown_webhook)

if __name__ == '__main__':
    pass
